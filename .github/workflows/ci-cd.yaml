# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]

# env:
#   DOCKER_REGISTRY: docker.io
#   DOCKER_USERNAME: nixndme
#   IMAGE_NAME: st-josephs-demo

# jobs:
#   security-scan:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4

#     - name: Run security scan
#       run: |
#         # Check for sensitive data
#         if grep -r "password\|secret\|key" app/ --exclude-dir=.git; then
#           echo "❌ Sensitive data found in code!"
#           exit 1
#         fi

#         # Check for init0xff.com exposure (demo of validation)
#         if grep -r "init0xff\.com" app/ --exclude-dir=.git; then
#           echo "❌ Domain exposure found! Security violation."
#           exit 1
#         fi

#         echo "✅ Security scan passed"

#   test:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'

#     - name: Install dependencies
#       run: |
#         cd app
#         pip install -r requirements.txt
#         pip install pytest

#     - name: Run tests
#       run: |
#         cd app
#         python -m pytest -v || echo "Tests would run here"

#   build-and-push:
#     needs: [ security-scan, test ]
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'

#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Login to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ env.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_HUB_TOKEN }} # ← CHANGED: Use correct secret name

#     - name: Generate version
#       id: version
#       run: |
#         VERSION="v1.0.${GITHUB_RUN_NUMBER}"
#         echo "version=${VERSION}" >> $GITHUB_OUTPUT

#     - name: Build and push
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         push: true
#         tags: |
#           ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
#           ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

#     - name: Update Kubernetes manifests
#       run: |
#         sed -i "s|image: nixndme/st-josephs-demo:.*|image: nixndme/st-josephs-demo:${{ steps.version.outputs.version }}|g" k8s/deployment.yaml
#         sed -i "s|value: \".*\"|value: \"${{ steps.version.outputs.version }}\"|g" k8s/deployment.yaml

#     - name: Commit updated manifests
#       run: |
#         git config --local user.email "action@github.com"
#         git config --local user.name "GitHub Action"
#         git add k8s/deployment.yaml
#         git commit -m "Update image to ${{ steps.version.outputs.version }}" || exit 0
#         git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git  # ← ADDED: GitHub token for auth

#####

# .github/workflows/ci-cd.yml
# St Joseph's DevOps Demo - Fixed GitHub Actions Pipeline

# .github/workflows/ci-cd.yml
# St Joseph's DevOps Demo - Fixed GitHub Actions Pipeline

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: nixndme
  IMAGE_NAME: st-josephs-demo

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      run: |
        echo "🔍 Scanning for sensitive data..."

        # Improved patterns to avoid false positives
        # Only flag when these words are used as actual secrets/keys
        if grep -r -E '(password|secret|api_key|private_key|access_key|secret_key|auth_token)\s*[=:]' app/ --exclude-dir=.git; then
          echo "❌ Sensitive data found in code!"
          exit 1
        fi

        echo "✅ Security scan passed - no sensitive data found"

  test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd app
        pip install -r requirements.txt

    - name: Run basic tests
      run: |
        cd app
        echo "🧪 Running application tests..."

        # Test that the app imports correctly
        python -c "import app; print('✅ App imports successfully')"

        # Test health endpoint
        python -c "
        from app import app
        with app.test_client() as client:
            response = client.get('/health')
            assert response.status_code == 200
            print('✅ Health endpoint test passed')
        "

        # Test home endpoint
        python -c "
        from app import app
        with app.test_client() as client:
            response = client.get('/')
            assert response.status_code == 200
            print('✅ Home endpoint test passed')
        "

        echo "✅ All tests passed"

  build-and-push:
    needs: [ security-scan, test ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Generate version
      id: version
      run: |
        VERSION="v1.0.${GITHUB_RUN_NUMBER}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "🏗️ Building version: ${VERSION}"

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Update Kubernetes manifests
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "🔄 Updating Kubernetes manifests to version: $VERSION"

        # Update deployment.yaml with new image version
        if [ -f "k8s/deployment.yaml" ]; then
          sed -i "s|image: nixndme/st-josephs-demo:.*|image: nixndme/st-josephs-demo:$VERSION|g" k8s/deployment.yaml
          echo "✅ Updated k8s/deployment.yaml"
        fi

        # Also update the ConfigMap with the new version
        if [ -f "k8s/deployment.yaml" ]; then
          sed -i "s|APP_VERSION: \".*\"|APP_VERSION: \"$VERSION\"|g" k8s/deployment.yaml
          echo "✅ Updated APP_VERSION in deployment"
        fi

        # Show what changed
        git diff k8s/

    - name: Commit updated manifests
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add all k8s files that might have changed
        git add k8s/

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🚀 Update image to ${{ steps.version.outputs.version }}" 
          echo "✅ Committed manifest updates"
        fi

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

  notify-success:
    needs: [ build-and-push ]
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Success notification
      run: |
        echo "🎉 Pipeline completed successfully!"
        echo "✅ Security scan passed"
        echo "✅ Tests passed" 
        echo "✅ Docker image built and pushed"
        echo "🚀 Ready for deployment to demo.init0xff.com"
